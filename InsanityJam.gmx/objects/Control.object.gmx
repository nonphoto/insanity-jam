<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_control</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar player1;
globalvar drone1;

player1 = 0
drone1 = 0

menu_height = tile_size * 4
display_set_gui_maximise(2, 2, 0, 0)

gui_translate_x = ds_stack_create()
gui_translate_y = ds_stack_create()

ds_stack_push(gui_translate_x, 0)
ds_stack_push(gui_translate_y, 0)

//Initialize element properties...


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = 0
y = 0

var empty_sprite = asset_get_index("spr_empty")
var size = 16
var w_start = view_wview / 2
var y_start = view_hview - menu_height

x = 0
y = y_start
draw_set_colour(c_black)
draw_rectangle(x, y, x + view_wview, y + menu_height, false)


if (player1.held &gt; 0) {
if (player1.held.type == "logic") {
    x = (w_start / 2) - (tile_size / 2)
    y = y_start
    player1.held.xx = x
    player1.held.yy = y
}
if (player1.held.type == "action") {
    x = (w_start / 2) - (tile_size / 2)
    y = y_start + tile_size * 3
    player1.held.xx = x
    player1.held.yy = y
}
}

if (player1.editing &gt; 0) {
    y = y_start + tile_size

l = array_length_1d(player1.editing.logic)
x = (w_start / 2) - (l * tile_size / 2)

i = 0        
while (i &lt; l) {
    draw_sprite(empty_sprite, 0, x, y);
    if (player1.editing.logic[i] &gt; 0) {
        player1.editing.logic[i].xx = x
        player1.editing.logic[i].yy = y
    }
    x += size
    i += 1
}
          
l = array_length_1d(player1.editing.action)
x = (w_start / 2) - (l * tile_size / 2)
y += size
    
i = 0
while (i &lt; l) {
    draw_sprite(empty_sprite, 0, x, y);
    if (player1.editing.action[i] &gt; 0) {
        player1.editing.action[i].xx = x
        player1.editing.action[i].yy = y    
    }
    x += size
    i += 1
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
